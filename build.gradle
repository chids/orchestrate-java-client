/**
 * A high performance, asynchronous Java client to query the Orchestrate.io platform.
 */

apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'idea'
apply plugin: 'eclipse'

group   = 'io.orchestrate'
version = '0.1.0-SNAPSHOT'

def groovyVersion = 'groovy-2.1.8'
def isReleaseVersion = !version.endsWith('SNAPSHOT')

plugins.withType(JavaPlugin) {
    sourceCompatibility = 1.6
    targetCompatibility = 1.6

    tasks.withType(Compile).all {
        // enable all warnings as errors
        options.compilerArgs = [
            '-Xlint:cast,deprecation,divzero,empty,unchecked,fallthrough,path,serial,finally,overrides,-options',
            '-Werror',
            '-XprintProcessorInfo'
        ]
        options.encoding = "UTF-8"
    }
}

repositories {
    mavenCentral()
}

configurations {
    deployerJars
    provided
    testProvided { extendsFrom provided }
}

sourceSets {
    main { compileClasspath += configurations.provided }
    test { compileClasspath += configurations.testProvided }
}

dependencies {
    def slf4jVersion   = '1.7.5'
    def grizzlyVersion = '2.3.7'
    def jacksonVersion = '2.3.0'

    deployerJars group: 'org.apache.maven.wagon', name: 'wagon-ssh', version: '2.5'

    provided(
        [group: 'org.projectlombok', name: 'lombok', version: '1.12.2'],
        [group: 'com.google.code.findbugs', name: 'jsr305', version: '2.0.2']
    )
    compile(
        [group: 'org.slf4j', name: 'slf4j-api', version: slf4jVersion],
        [group: 'org.glassfish.grizzly', name: 'grizzly-http', version: grizzlyVersion],
        [group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: jacksonVersion]
    )
    testCompile(
        [group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.2.1'],
        [group: 'org.spockframework', name: 'spock-core', version: '0.7-groovy-2.0'],
        [group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-joda', version: jacksonVersion]
    )
    testRuntime(
        [group: 'org.slf4j', name: 'slf4j-simple', version: slf4jVersion]
    )
}

test {
    jvmArgs '-ea', '-Djava.awt.headless=true', '-Xms128m', '-Xmx512m', '-XX:MaxPermSize=512m'
}

jar {
    manifest {
        attributes 'Implementation-Title': 'orchestrate-client',
                   'Implementation-Version': project.version,
                   'Created-By': 'Gradle ' + gradle.gradleVersion,
                   'Build-Jdk': System.properties['java.version'],
                   'Manifest-Version': 1.0
    }
}

javadoc {
    classpath += configurations.provided
}

task sourceJar(type: Jar, dependsOn: classes) {
    baseName = 'orchestrate-client'
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    baseName = 'orchestrate-client'
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}

signing {
    if (isReleaseVersion) {
        sign configurations.archives
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { deployment ->
                signing.signPom(deployment)
            }

            if (isReleaseVersion) {
                repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2') {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }
            } else {
                repository(url: 'https://oss.sonatype.org/content/repositories/snapshots') {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }
            }

            pom.project {
                groupId project.group
                artifactId 'orchestrate-client'
                version project.version
                packaging 'jar'
                name 'Orchestrate Java Client'
                description "A high performance, asynchronous Java client to query the Orchestrate.io service."
                url 'https://github.com/orchestrate-io/orchestrate-java-client'
                inceptionYear '2013'
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }
                scm {
                    url 'https://github.com/orchestrate-io/orchestrate-java-client'
                    connection 'scm:git://github.com/orchestrate-io/orchestrate-java-client.git'
                    developerConnection 'scm:git@github.com:orchestrate-io/orchestrate-java-client.git'
                }
                developers {
                    developer {
                        id 'novabyte'
                        name 'Chris Molozian'
                        email 'chris@orchestrate.io'
                    }
                }
            }
        }
    }
}
uploadArchives.dependsOn ':build'

idea {
    module {
        downloadJavadoc = true
        downloadSources = true

        scopes.PROVIDED.plus += configurations.provided

        // enrich the IDE with Groovy support
        iml.withXml { provider ->
            provider.node.component.first().appendNode('orderEntry',
                    [type: 'library', name: groovyVersion, level: 'application'])
        }
    }

    project.ipr {
        withXml { provider ->
            // let the IDE know that this is a Git project
            provider.node.component.find { it.@name == 'VcsDirectoryMappings' }.mapping.@vcs = 'Git'
            // turn on annotation processing in the IDE
            provider.node.component.find { it.@name == 'CompilerConfiguration' }.annotationProcessing[0].replaceNode {
                annotationProcessing {
                    profile(default: true, name: 'Default', enabled: true) {
                        processorPath useClasspath: true
                    }
                }
            }
        }
    }
}

eclipse {
    classpath { plusConfigurations += configurations.provided }
}
